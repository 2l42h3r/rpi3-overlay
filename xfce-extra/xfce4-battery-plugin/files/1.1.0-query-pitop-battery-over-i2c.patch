diff --git a/panel-plugin/Makefile.am b/panel-plugin/Makefile.am
index 44a6263..7057955 100644
--- a/panel-plugin/Makefile.am
+++ b/panel-plugin/Makefile.am
@@ -16,20 +16,24 @@ libbattery_la_SOURCES =							\
 	libacpi.h							\
 	libacpi.c							\
 	libapm.h							\
-	libapm.c
+	libapm.c							\
+	libpitop.h							\
+	libpitop.c
 
 libbattery_la_CFLAGS =							\
 	$(LIBXFCE4PANEL_CFLAGS)						\
 	$(LIBXFCE4UI_CFLAGS)						\
 	$(LIBXFCE4UTIL_CFLAGS)						\
 	$(GTK_CFLAGS)							\
-	$(PLATFORM_CFLAGS)
+	$(PLATFORM_CFLAGS)							\
+	-I/usr/include/wiringpi
 
 libbattery_la_LIBADD =							\
 	$(LIBXFCE4PANEL_LIBS)						\
 	$(LIBXFCE4UI_LIBS)						\
 	$(LIBXFCE4UTIL_LIBS)						\
-	$(GTK_LIBS)
+	$(GTK_LIBS)									\
+	-lwiringPi
 
 libbattery_la_LDFLAGS = \
 	-avoid-version \
diff --git a/panel-plugin/battery.c b/panel-plugin/battery.c
index 180157c..49552a0 100644
--- a/panel-plugin/battery.c
+++ b/panel-plugin/battery.c
@@ -37,6 +37,9 @@
 #include <libapm.h>
 #endif
 
+/* specify that we want to use I2C battery queries for the Pi-Top */
+#define PI_TOP			1
+
 #include <sys/stat.h>
 #include <sys/types.h>
 #include <fcntl.h>
@@ -55,6 +58,10 @@
 #include <sys/time.h>
 #include <time.h>
 
+#ifdef PI_TOP
+#include "libpitop.h"
+#endif /* PI_TOP */
+
 #define BORDER          6
 #define AC_COLOR        "#8888FF"
 #define HIGH_COLOR      "#00ff00"
@@ -131,7 +138,7 @@ typedef struct
 } t_battmon_dialog;
 
 enum {BM_DO_NOTHING, BM_MESSAGE, BM_COMMAND, BM_COMMAND_TERM};
-enum {BM_BROKEN, BM_USE_ACPI, BM_USE_APM};
+enum {BM_BROKEN, BM_USE_ACPI, BM_USE_APM, BM_USE_I2C };
 enum {BM_MISSING, BM_CRITICAL, BM_CRITICAL_CHARGING, BM_LOW, BM_LOW_CHARGING, BM_OK, BM_OK_CHARGING, BM_FULL, BM_FULL_CHARGING};
 
 static gboolean battmon_set_size(XfcePanelPlugin *plugin, int size, t_battmon *battmon);
@@ -162,6 +169,18 @@ init_options(t_battmon_options *options)
 gboolean
 detect_battery_info(t_battmon *battmon)
 {
+#ifdef PI_TOP
+	int charge, time_remaining;
+	bool acline;
+	DBG ("Pi-Top detect_battery_info()...");
+	/* check if I2C works before doing anything else */
+	if (read_battery_info_over_i2c(&charge, &time_remaining, &acline)) {
+		DBG ("using I2C");
+		battmon->method = BM_USE_I2C;
+		return TRUE;
+	}
+#endif /* PI_TOP */
+
 #ifdef __FreeBSD__
   /* This is how I read the information from the APM subsystem under
      FreeBSD.  Each time this functions is called (once every second)
@@ -283,8 +302,22 @@ update_apm_status(t_battmon *battmon)
     static int last_lcapacity = 0;
     static int last_rate = 0;
     static int last_acline = 0;
+#ifdef PI_TOP
+	/* perform the read over I2C */
+	bool ac_line;
+	battmon->method = BM_BROKEN;
+	DBG ("Pi-Top update_apm_status()...");
+	if (!read_battery_info_over_i2c(&charge, &time_remaining, &ac_line)) {
+		return TRUE;
+	}
+	acline = ac_line ? TRUE : FALSE;
+	battmon->method = BM_USE_I2C;
+	if(battmon->timeoutid != 0) g_source_remove(battmon->timeoutid);
+	/* poll every 2 seconds when using I2C */
+	battmon->timeoutid = g_timeout_add(2 * 1024,
+		(GSourceFunc) update_apm_status, battmon);
 
-#if defined(__OpenBSD__) || defined(__NetBSD__)
+#elif defined(__OpenBSD__) || defined(__NetBSD__)
   /* Code for OpenBSD by Joe Ammond <jra@twinight.org>. Using the same
      procedure as for FreeBSD.
      Made to work on NetBSD by Stefan Sperling <stsp@stsp.in-berlin.de>
@@ -441,7 +474,7 @@ battmon.c:241: for each function it appears in.)
 #endif
     }
 #endif
-#endif
+#endif /* PI_TOP final else */
     battmon->flag = FALSE;
     DBG("method=%d, acline=%d, time_remaining=%d, charge=%d", battmon->method, acline, time_remaining, charge);
 
@@ -460,7 +493,11 @@ battmon.c:241: for each function it appears in.)
     }
 
     if(battmon->options.display_icon){
+#ifdef PI_TOP
+        if((battmon->method == BM_USE_ACPI && acpiinfo->present == 0) || (battmon->method == BM_USE_APM && charge == 0)  || (battmon->method == BM_USE_I2C && charge == 0)) {
+#else
         if((battmon->method == BM_USE_ACPI && acpiinfo->present == 0) || (battmon->method == BM_USE_APM && charge == 0)) {
+#endif
           /* battery missing */
           icon_name = g_strdup("xfce4-battery-missing");
           new_state = BM_MISSING;
@@ -522,7 +559,11 @@ battmon.c:241: for each function it appears in.)
 
     if(acline) {
         char *t;
+#ifdef PI_TOP
+        if((battmon->method == BM_USE_ACPI && acpiinfo->present == 0) || (battmon->method == BM_USE_APM && charge == 0) || (battmon->method == BM_USE_I2C && charge == 0)) {
+#else
         if((battmon->method == BM_USE_ACPI && acpiinfo->present == 0) || (battmon->method == BM_USE_APM && charge == 0)) {
+#endif
             t=_("(No battery, AC on-line)");
         } else {
             t=(charge<99.9)?_("(Charging from AC)"):_("(AC on-line)");
diff --git a/panel-plugin/libpitop.c b/panel-plugin/libpitop.c
new file mode 100644
index 0000000..dba70a4
--- /dev/null
+++ b/panel-plugin/libpitop.c
@@ -0,0 +1,157 @@
+/*
+ * libpitop.c
+ * read pi-top battery status over I2C
+ *
+ * Adapted from original code, Copyright 2016, rricharz
+ * (https://github.com/rricharz/pi-top-battery-status/blob/master/gtk_battery.c)
+ * This version copyright 2017, sakaki (sakaki@deciban.com)
+ *
+ * This library is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <wiringPiI2C.h>
+#include <time.h>
+#include <string.h>
+#include <unistd.h>
+#include <sys/types.h>
+#include <stdbool.h>
+
+#define MAX_ANSWER_SIZE 64		// Maximum size of answer string
+#define MAX_COUNT       20		// Maximum number of trials
+#define SLEEP_TIME		500		// time between two i2cget in microsec
+
+int i2c_handle = -1;
+
+/*
+ * setup_i2c(void)
+ *
+ * Set up the wiringPi I2C handle. Must be called before any read_... calls are issued.
+ * Returns true if setup OK, false otherwise
+ * Will only set up the handle once, even if called multiple times. Internal function.
+ */
+bool setup_i2c(void)
+{
+	if (i2c_handle < 0) {
+		i2c_handle = wiringPiI2CSetup(0x0b);
+	}
+	return (i2c_handle >= 0);
+}
+
+/*
+ * bool i2cget(int address, int *data)
+ *
+ * Fetch a 16-bit datum over I2C (@ address) into "data".
+ * Returns true if fetch OK, false otherwise. Internal function.
+ */
+bool i2cget(int address, int *data)
+{
+	int res = wiringPiI2CReadReg16(i2c_handle, address);
+	if (res < 0)
+		return false;
+	else {
+		*data = res;
+		return true;
+	}
+}
+
+/*
+ * bool read_battery_info_over_i2c(int *charge, int *time_remaining, bool *acline)
+ *
+ * Given that a valid handle has (once) been obtained via setup_i2c(), query the
+ * Pi-Top's battery info, and return it:
+ *   charge is the remaining capacity percentage, 0 (empty) <= charge <= 100 (full)
+ *   time_remaining is the number of minutes estimated runtime left, if on battery, or
+ *     estimated time to charge, if on mains; may be 0 if fully charged
+ *   acline is true if on mains; false if running on battery power
+ *
+ * NB: if the return status is not true, none of the above values should be relied upon
+ * (and may contain garbage).
+ */
+bool
+read_battery_info_over_i2c(int *charge, int *time_remaining, bool *acline)
+{
+	int capacity, current;
+	int count;
+	char *sstatus;
+	int time;
+
+	if (!setup_i2c()) return false;
+
+	// capacity
+	count = 0;
+	capacity = -1;
+	while ((capacity  <  0) && (count++ < MAX_COUNT)) {
+		if (i2cget(0x0d, &capacity)) {
+			if ((capacity > 100) || (capacity < 0)) {
+				capacity = -1;              // capacity out of limits
+			}
+		}
+		usleep(SLEEP_TIME);
+	}
+	// current
+	sstatus = "unknown";
+	count = 0;
+	while ((strcmp(sstatus, "unknown") == 0) && (count++ < MAX_COUNT)) {
+		if (i2cget(0x0a, &current)) {
+			if (current > 32767)                   // status is signed 16 bit word
+				current -= 65536;
+			if ((current > -5000) && (current < 5000) && (current != -1)) {
+				if (current < 0)
+					sstatus = "discharging";
+				else if (current > 0)
+					sstatus = "charging";
+				else
+					sstatus = "external power";
+			}
+			else
+				current = -32767;          // unknown
+		}
+		usleep(SLEEP_TIME);
+	}
+	// charging/discharging time
+	count = 0;
+	time = -1;
+	if (strcmp(sstatus,"external power") == 0) {
+		time = 0;
+	}
+	else if (strcmp(sstatus,"charging") == 0) {
+		while ((time < 0) && (count++ < MAX_COUNT)) {
+			if (i2cget(0x13, &time)) {
+				if ((time < 0) || (time >999)) {
+					time = -1;
+				}
+			}
+			usleep(SLEEP_TIME);
+		}
+	}
+	else if (strcmp(sstatus,"discharging") == 0) {
+		while ((time < 0) && (count++ < MAX_COUNT)) {
+			if (i2cget(0x12, &time)) {
+				if ((time < 0) || (time > 960)) {
+					time = -1;
+				}
+			}
+			usleep(SLEEP_TIME);
+		}
+	}
+	*charge=capacity;
+	*time_remaining=time;
+	*acline=(strcmp(sstatus, "discharging") != 0);
+	return ((capacity != -1) && (current != -32767) && (time != -1));
+}
diff --git a/panel-plugin/libpitop.h b/panel-plugin/libpitop.h
new file mode 100644
index 0000000..938a00e
--- /dev/null
+++ b/panel-plugin/libpitop.h
@@ -0,0 +1,42 @@
+/*
+ * libpitop.c
+ * read pi-top battery status over I2C
+ *
+ * Adapted from original code, Copyright 2016, rricharz
+ * (https://github.com/rricharz/pi-top-battery-status/blob/master/gtk_battery.c)
+ * This version copyright 2017, sakaki (sakaki@deciban.com)
+ *
+ * This library is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+
+#include <sys/types.h>
+#include <stdbool.h>
+
+/*
+ * bool read_battery_info_over_i2c(int *charge, int *time_remaining, bool *acline)
+ *
+ * Given that a valid handle has (once) been obtained via setup_i2c(), query the
+ * Pi-Top's battery info, and return it:
+ *   charge is the remaining capacity percentage, 0 (empty) <= charge <= 100 (full)
+ *   time_remaining is the number of minutes estimated runtime left, if on battery, or
+ *     estimated time to charge, if on mains; may be 0 if fully charged
+ *   acline is true if on mains; false if running on battery power
+ *
+ * NB: if the return status is not true, none of the above values should be relied upon
+ * (and may contain garbage).
+ */
+extern bool read_battery_info_over_i2c(int *charge, int *time_remaining, bool *acline);
